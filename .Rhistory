wd("Dropbox")
setwd(~Dropbox)
2d<-c(2,3,4,5)
twoD<-c(2,3,4,5)
fourD<(3,4,5,6)
fourD<-(3,4,5,6)
fourD<-c(3,4,5,6)
fix(fourD)
haireye <- read.csv("/var/folders/fq/txzwhnc164v3v2t63c6c3zdw0000gn/T//Rtmp3Mrzrl/data1336ccb6323", sep=";")
View(haireye)
ls(haireye)
front(haireye)
summary(haireye)
summary(M Brown)
View(haireye)
View(haireye)
haireye
haireye(,12)
summary(haireye[,12])
summary(haireye[12,])
average(haireye[12,])
mean(haireye[12,])
library(help="datasets")
view(AirPassengers)
AirPassengers
mean(AirPassengers)
graph(AirPassengers)
chart(AirPassengers)
plot(AirPassengers)
summary(AirPassengers)
iris
quakes
women
women[height]
average(women[height])
mean(women[height])
View(haireye)
line()
line(10,10)
rect(10,10,10,10)
plot.new()
rect(10,10,10,10)
rect(10,10,100,100)
plot.new(rect(10,10,100,100))
require(lme4)
y<-function(x){x^2+3}
y(5)
y(10)
y(7)
y(300)
y(3958849)
y(3958)
gato<-function(x){}
gato<-function(x){print("FUCK YOU")}
gato()
dfads
d
d
fd
sdf
fs
daf
df
adfa
gato()
Jennifer<-function(x){}
Jennifer<-function(x){print(Fleming)}
Jennifer()
Jennifer<-function(x){print("Fleming")}
Jennifer()
gato()
hello<-function(x){print(Enter Your Name)}
hello<-function(x){print("Enter Your Name")}
hello()
gato()
Gato<-function(x){"Minus is so much cooler than you"}
jdsl
fds
d
sd
d
sdf
sdf
dfs
dfds
Gato()
Welcome<-function(x){
print(What is your name?)
What is your name?<-function(x){
ifelse("Gato","Fuck You!","Nice to meet you!")
}
}
Welcome<-function(x){
print(What is your name?)
What is your name?<-function(x){
ifelse(Gato,"Fuck You!","Nice to meet you!")
}
}
Welcome<-function(x){
print(What is your name?)
What is your name?<-function(x){
ifelse(Gato,"Fuck You!","Nice to meet you!")
})
}
demo()
setwd("~jamesbain/Desktop")
quiz<-read.csv("Quiz1.csv", header=T)
require("ggplot2")
quiz
mean(quiz$Total)
median(quiz$Total)
sd(quiz$Total)
tot<-ggplot(quiz,aes(x=Total))
tot+geom_histogram()
hist(quiz$Total)
tot<-ggplot(quiz,aes(x=Total))
tot+geom_histogram()
tot+geom_histogram(binwidth = 5)
tot+geom_histogram(binwidth = 10)
tot+geom_histogram(binwidth = 5)
sum(quiz$Q1)
for (i in quiz$Q1:quiz$Q10) {
sum}
---
title: "Explore SF Salary Data"
author: "Michael Griffiths"
output:
html_document:
highlight: pygments
toc: yes
---
install.packages("RSQLite")
install.packages("tidyr")
install.packages("readr")
install.packages('stringr')
install.packages('scales')
install.packages("scales")
install.packages("scales")
install.packages("mixtools")
```{r warning=F, comment=F, message=F}
```{r warning=F, comment=F, message=F}
---
title: "Explore SF Salary Data"
author: "Michael Griffiths"
output:
html_document:
highlight: pygments
toc: yes
---
install.packages("rmarkdown")
---
title: "Explore SF Salary Data"
author: "Michael Griffiths"
output:
html_document:
highlight: pygments
toc: yes
---
```{r warning=F, comment=F, message=F}
library(dplyr)
library(RSQLite)
library(tidyr)
library(ggplot2)
library(readr)
library(stringr)
library(scales)
library(mixtools)
```
list.files("../sf_salaries/output/")
list.files("../sf_salaries/output/")
setwd(dir = 'Spring 2016/CS 7001/Project_2/sf_salaries/')
list.files("output/")
data_csv <- read_csv("output/Salaries.csv", na=c("Not Provided"))
(glimpse(data_csv))
db <- src_sqlite("output/database.sqlite")
(glimpse(db %>% tbl("Salaries")))
head(data_csv) == db %>% tbl("Salaries") %>% head
data <- data_csv
non_numeric_vars <- names(data)[!sapply(data, is.numeric)]
data %>%
select(one_of(non_numeric_vars)) %>%
summarise_each(funs(unique_vars = length(unique(.))))
(head(data$Benefits))
# So how about unique values?
(head(unique(data$Benefits)))
```
Those are all numbers!
That makes some sense - by default `dplyr` scans the first 50 rows to infer type. If there were no numbers in the first 50 rows `dplyr` would cast to string.
When does the first non-empty value of benefits occur?
```{r}
which.min(data$Benefits == "")
this.dir<- dirname(parent.frame(2)$ofile)
this.dir <- dirname(parent.frame(2)$ofile)
this.dir <- dirname(sys.frame(1)$ofile)
this.dir <- dirname(sys.frame(1))
source("original.Rmd", chdir = TRUE)
source("original.Rmd", chdir = TRUE)
source("original.Rmd", chdir = TRUE)
source("original.Rmd", chdir = TRUE)
setwd(dir = '../sf_salaries/')
setwd(dir = '../sf_salaries/')
install.packages('gender')
setwd(dir = '../sf_salaries/')
library(dplyr)
library(RSQLite)
library(tidyr)
library(ggplot2)
library(readr)
library(stringr)
library(scales)
library(mixtools)
library(gender) # add package gender for gender prediction from first names
list.files("output/")
data_csv <- read_csv("output/Salaries.csv", na=c("Not Provided"))
(glimpse(data_csv))
# The database
db <- src_sqlite("output/database.sqlite")
# Get table list
# Preview tables
(glimpse(db %>% tbl("Salaries")))
head(data_csv) == db %>% tbl("Salaries") %>% head
data <- data_csv
non_numeric_vars <- names(data)[!sapply(data, is.numeric)]
data %>%
select(one_of(non_numeric_vars)) %>%
summarise_each(funs(unique_vars = length(unique(.))))
(head(data$Benefits))
(head(unique(data$Benefits)))
which.min(data$Benefits == "")
data <- data %>%
mutate(Benefits = as.numeric(Benefits))
non_numeric_vars <- names(data)[!sapply(data, is.numeric)]
data %>%
group_by(Notes, Agency, Status) %>%
summarise(Frequency = n())
data <- data %>%
select(-Notes, -Agency)
data %>%
group_by(JobTitle) %>%
summarise(Frequency = n()) %>%
arrange(desc(Frequency)) %>%
head
names(data)
data %>%
strsplit(EmployeeName," ")
strsplit(data$EmployeeName, " ")
data %>%
strsplit(EmployeeName," ")
table(duplicated(data$Id))
data %>%
filter(TotalPay < 0)
data %>%
strsplit(EmployeeName," ")
strsplit((EmployeeName)," ")
names(data)
strsplit((EmployeeName)," ")
strsplit((EmployeeName)," ")
data %>%
strsplit((EmployeeName)," ")
data %>%
strsplit(data$EmployeeName," ")
```
strsplit(data$EmployeeName," ")
data %>%
strsplit(data$EmployeeName," ")
strsplit(data$EmloyeeName, " ")[[1]]
strsplit(EmployeeName," ")
data %>%
strsplit(EmployeeName," ")
head(data$EmployeeName)
strsplit(head(data$EmployeeName), " ")[[1]]
strsplit(head(data$EmployeeName), " ")[1]
strsplit(head(data$EmployeeName), " ")[1,]
strsplit(head(data$EmployeeName), " ")[,1]
strsplit(head(data$EmployeeName), " ")[0]
strsplit(head(data$EmployeeName), " ")[2]
data_csv <- read_csv("output/Salaries.csv", na=c("Not Provided"))
(glimpse(data_csv))
setwd(dir = '../sf_salaries/')
library(dplyr)
library(RSQLite)
library(tidyr)
library(ggplot2)
library(readr)
library(stringr)
library(scales)
library(mixtools)
library(gender) # add package gender for gender prediction from first names
list.files("output/")
data_csv <- read_csv("output/Salaries.csv", na=c("Not Provided"))
(glimpse(data_csv))
# The database
db <- src_sqlite("output/database.sqlite")
# Get table list
# Preview tables
(glimpse(db %>% tbl("Salaries")))
head(data_csv) == db %>% tbl("Salaries") %>% head
data <- data_csv
data
non_numeric_vars <- names(data)[!sapply(data, is.numeric)]
data %>%
select(one_of(non_numeric_vars)) %>%
summarise_each(funs(unique_vars = length(unique(.))))
(head(data$Benefits))
(head(unique(data$Benefits)))
data <- data %>%
mutate(Benefits = as.numeric(Benefits))
non_numeric_vars <- names(data)[!sapply(data, is.numeric)]
data %>%
group_by(Notes, Agency, Status) %>%
summarise(Frequency = n())
data <- data %>%
select(-Notes, -Agency)
data %>%
strsplit(head(EmployeeName)," ")
data %>%
strsplit(head(EmployeeName)," ")
data %>%
group_by(JobTitle) %>%
summarise(Frequency = n()) %>%
arrange(desc(Frequency)) %>%
head
head(data$strsplit," ")
strsplit(head(data$EmployeeName)," ")
sapply(strsplit(head(data$EmployeeName)," "), "[[", 1)
sapply(strsplit(head(data$EmployeeName,10)," "), "[[", 1)
sapply(strsplit(data$EmployeeName," "), "[[", 1)
data$fname<-sapply(strsplit(data$EmployeeName," "), "[[", 1)
